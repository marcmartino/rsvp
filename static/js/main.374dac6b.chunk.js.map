{"version":3,"sources":["i18n.ts","queries/constants.ts","queries/getAuth.ts","components/LoginForm/LoginForm.tsx","components/LoginPage/LoginPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["i18n","use","initReactI18next","init","resources","en","translation","welcome","kr","fallbackLng","interpolation","escapeValue","AUTHORIZE_USER","method","url","body","name","zip","getAuth","a","console","log","fetch","headers","JSON","stringify","then","d","json","LoginForm","t","useTranslation","useState","setFormVals","onSubmit","e","preventDefault","catch","err","error","type","onChange","target","value","title","LoginPage","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAuBAA,IACGC,IAAIC,KACJC,KAAK,CACJC,UApBc,CAChBC,GAAI,CACFC,YAAa,CACXC,QAAS,UACT,kBAAmB,SACnB,sBAAuB,OACvB,qBAAsB,WACtB,yBAA0B,WAG9BC,GAAI,CACFF,YAAa,CACXC,QAAS,8BASXE,YAAa,KAObC,cAAe,CACbC,aAAa,KAIJX,EAAf,E,MAAeA,I,gDC9BFY,EAA0D,CACrEC,OAAQ,OACRC,IAAI,GAAD,OARC,mCAQD,kBACHC,KAAM,CACJC,KAAM,GACNC,IAAK,KCZIC,EAAO,uCAAG,WAAOF,EAAcC,GAArB,SAAAE,EAAA,6DACrBC,QAAQC,IAAIT,EAAeE,KADN,kBAEdQ,MAAMV,EAAeE,IAAK,CAC/BD,OAAQD,EAAeC,OACvBU,QAAS,CACP,eAAgB,oBAElBR,KAAMS,KAAKC,UAAU,CAAET,OAAMC,UAC5BS,MAAK,SAACC,GAAD,OAAOA,EAAEC,WARI,2CAAH,wD,OCIPC,EAAuB,WAAO,IACjCC,EAAMC,cAAND,EADgC,EAEHE,mBAAS,CAAEhB,KAAM,GAAIC,IAAK,KAFvB,0BAE/BD,EAF+B,EAE/BA,KAAMC,EAFyB,EAEzBA,IAAOgB,EAFkB,KAGxC,OACE,uBACEC,SAAU,SAACC,GACTA,EAAEC,iBACFlB,EAAQF,EAAMC,GACXS,MAAK,SAACS,GACLf,QAAQC,IAAI,SAAUc,MAEvBE,OAAM,SAACC,GACNlB,QAAQmB,MAAMD,OARtB,UAYE,gCACGR,EAAE,uBACH,uBACEU,KAAK,OACLC,SAAU,SAACN,GAAD,OACRF,GAAY,kBAAc,CAAEhB,IAAhB,EAAGA,IAAkBD,KAAMmB,EAAEO,OAAOC,gBAItD,gCACGb,EAAE,sBACH,uBACEU,KAAK,OACLC,SAAU,SAACN,GAAD,OACRF,GAAY,kBAAe,CAAEjB,KAAjB,EAAGA,KAAoBC,IAAKkB,EAAEO,OAAOC,gBAIvD,uBAAOH,KAAK,SAASI,MAAOd,EAAE,+BClCvBe,EAAuB,SAAC,GAAQ,mBACnCf,EAAMC,cAAND,EAER,OACE,gCACE,iCACE,6BAAKA,EAAE,uBAET,cAAC,EAAD,QCCSgB,MATf,WAEE,OADcf,cAAND,EAEN,qBAAKiB,UAAU,MAAf,SACE,cAAC,EAAD,OCISC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.374dac6b.chunk.js","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\n// the translations\n// (tip move them in a JSON file and import them,\n// or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\nconst resources = {\n  en: {\n    translation: {\n      welcome: \"Welcome\",\n      \"loginPage.title\": \"Log In\",\n      \"loginPage.nameInput\": \"Name\",\n      \"loginPage.zipInput\": \"Zip Code\",\n      \"loginPage.submitButton\": \"Log In\",\n    },\n  },\n  kr: {\n    translation: {\n      welcome: \"환영하다\",\n    },\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    fallbackLng: \"en\",\n    // load: [\"en\", \"kr\"],\n    // lng: \"kr\",\n    // lng: \"en\", // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\n    // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\n    // if you're using a language detector, do not define the lng option\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","const API_URL =\n  process.env[\"NODE_ENV\"] !== \"production\"\n    ? \"//localhost:3000\"\n    : \"https://wrsvp-api.herokuapp.com/\";\n\ntype Method = \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n\ntype ApiRoute<T> = { method: Method; url: string; body: T };\n\nexport const AUTHORIZE_USER: ApiRoute<{ name: string; zip: string }> = {\n  method: \"POST\",\n  url: `${API_URL}/authorizeUser`,\n  body: {\n    name: \"\",\n    zip: \"\",\n  },\n};\n","import { AUTHORIZE_USER } from \"./constants\";\n\nexport const getAuth = async (name: string, zip: string) => {\n  console.log(AUTHORIZE_USER.url);\n  return fetch(AUTHORIZE_USER.url, {\n    method: AUTHORIZE_USER.method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ name, zip }),\n  }).then((d) => d.json());\n};\n","import React, { FC, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { getAuth } from \"../../queries/getAuth\";\n\ninterface Props {}\n\nexport const LoginForm: FC<Props> = () => {\n  const { t } = useTranslation();\n  const [{ name, zip }, setFormVals] = useState({ name: \"\", zip: \"\" });\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        getAuth(name, zip)\n          .then((e) => {\n            console.log(\"submit\", e);\n          })\n          .catch((err) => {\n            console.error(err);\n          });\n      }}\n    >\n      <div>\n        {t(\"loginPage.nameInput\")}\n        <input\n          type=\"text\"\n          onChange={(e) =>\n            setFormVals(({ zip }) => ({ zip, name: e.target.value }))\n          }\n        />\n      </div>\n      <div>\n        {t(\"loginPage.zipInput\")}\n        <input\n          type=\"text\"\n          onChange={(e) =>\n            setFormVals(({ name }) => ({ name, zip: e.target.value }))\n          }\n        />\n      </div>\n      <input type=\"submit\" title={t(\"loginPage.subitButton\")} />\n    </form>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { LoginForm } from \"../LoginForm/LoginForm\";\n\ninterface Props {}\n\nexport const LoginPage: FC<Props> = ({}) => {\n  const { t } = useTranslation();\n\n  return (\n    <div>\n      <header>\n        <h1>{t(\"loginPage.title\")}</h1>\n      </header>\n      <LoginForm />\n    </div>\n  );\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useTranslation } from \"react-i18next\";\nimport { LoginPage } from \"./components/LoginPage/LoginPage\";\n\nfunction App() {\n  const { t } = useTranslation();\n  return (\n    <div className=\"App\">\n      <LoginPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./i18n\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}